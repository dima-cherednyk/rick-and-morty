{"version":3,"sources":["components/PageNavLink/PageNavLink.tsx","components/Header/Header.tsx","utils/fetchClient.ts","api/characters.tsx","utils/searchHelper.ts","components/Cards/Cards.tsx","components/CharactersPage/CharactersPage.tsx","components/HomePage/HomePage.tsx","api/episodes.tsx","components/EpisodesPage/EpisodesPage.tsx","api/locations.tsx","components/LocationsPage/LocationsPage.tsx","components/MyWatchList/MyWatchList.tsx","App.tsx","index.tsx"],"names":["PageNavLink","to","text","className","isActive","classNames","Header","request","url","delay","Promise","resolve","setTimeout","then","fetch","response","ok","Error","json","client","getCharacters","search","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","Cards","card","useState","open","setOpen","Card","onClick","CardMedia","component","height","image","alt","name","CardContent","Typography","id","variant","gender","species","Modal","aria-labelledby","aria-describedby","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","status","origin","type","location","CharactersPage","useSearchParams","searchParams","setSearchParams","page","get","useLocation","characters","setCharacters","pagesNumber","setPagesNumber","actualPage","setActualPage","findError","setFindError","useEffect","a","loadedCharacters","results","info","pages","loadData","length","Box","CircularProgress","Pagination","count","color","onChange","event","String","FormControl","sx","width","background","InputLabel","Select","target","labelId","label","MenuItem","Button","map","HomePage","getEpisodes","EpisodesPage","episodes","setEpisodes","loadedEpisodes","TextField","InputLabelProps","style","inputProps","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","episode","border","scope","air_date","getLocations","LocationsPage","dimension","locations","setLocations","loadedLocations","MyWatchList","initialValue","getDataFromStorage","localStorage","getItem","storage","JSON","parse","setValue","setItem","stringify","useLocalStorage","watchList","setWatchList","addEpisode","some","item","watched","gutterBottom","padding","Checkbox","checked","changeStatus","find","updatedList","handleChange","IconButton","edge","filter","deleteEpisode","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6431fbf.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport React from 'react';\nimport classNames from 'classnames';\nimport './PageNavLink.scss';\n\ntype Props = {\n  to: string;\n  text: string;\n};\n\nexport const PageNavLink: React.FC<Props> = ({ to, text }) => {\n  return (\n    <NavLink\n      to={to}\n      className={({ isActive }) => classNames(\n        'navbar-item',\n        { 'is-active': isActive },\n      )}\n    >\n      {text}\n    </NavLink>\n  );\n};\n","import React from 'react';\nimport { PageNavLink } from '../PageNavLink/PageNavLink';\nimport './Header.scss';\n\nexport const Header = () => {\n  return (\n    <nav className=\"navbar\">\n      <PageNavLink to=\"/\" text=\"Home Page\" />\n      <PageNavLink to=\"/character\" text=\"Characters\" />\n      <PageNavLink to=\"/episode\" text=\"Episodes\" />\n      <PageNavLink to=\"/location\" text=\"Locations\" />\n      <PageNavLink to=\"/my-watch-list\" text=\"My watch list\" />\n    </nav>\n  );\n};\n","const BASE_URL = 'https://rickandmortyapi.com/api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction request<T>(\n  url: string,\n): Promise<T> {\n  return wait(300)\n    .then(() => fetch(BASE_URL + url))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n};\n","import { InfoCharacters } from '../types/InfoCharacters';\nimport { client } from '../utils/fetchClient';\n\nexport const getCharacters = (search: string) => {\n  if (!search) {\n    return client.get<InfoCharacters>('/character/');\n  }\n\n  return client.get<InfoCharacters>(`/character/${search}`);\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams,\n): string {\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  return newParams.toString();\n}\n","import {\n  Backdrop,\n  Card,\n  Fade,\n  Modal,\n  CardMedia,\n  CardContent,\n  Typography,\n} from '@mui/material';\nimport React, { useState } from 'react';\nimport { Character } from '../../types/Character';\nimport './Cards.scss';\n\ntype Props = {\n  card: Character;\n};\n\nexport const Cards: React.FC<Props> = ({ card }) => {\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(!open);\n\n  return (\n    <Card onClick={handleOpen} className=\"card\">\n      <CardMedia\n        component=\"img\"\n        height=\"140\"\n        image={card.image}\n        alt={card.name}\n      />\n      <CardContent>\n        <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h6\">\n          {card.name}\n        </Typography>\n        <Typography variant=\"body2\">\n          {`Gender: ${card.gender}`}\n          <br />\n          {`Species: ${card.species}`}\n        </Typography>\n      </CardContent>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        open={open}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <Card className=\"card-popups\">\n            <CardMedia\n              component=\"img\"\n              height=\"140\"\n              image={card.image}\n              alt={card.name}\n            />\n            <CardContent>\n              <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h6\">\n                {card.name}\n              </Typography>\n              <Typography variant=\"body2\">\n                {`Gender: ${card.gender}`}\n                <br />\n                {`Species: ${card.species}`}\n                <br />\n                {`Status: ${card.status}`}\n                <br />\n                {`Origin: ${card.origin.name}`}\n                <br />\n                {`Type: ${card.type || 'none'}`}\n                <br />\n                {`Location: ${card.location.name}`}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Fade>\n      </Modal>\n    </Card>\n  );\n};\n","import {\n  Select,\n  MenuItem,\n  SelectChangeEvent,\n  InputLabel,\n  FormControl,\n  Box,\n  Pagination,\n  Button,\n  CircularProgress,\n} from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { getCharacters } from '../../api/characters';\nimport { Character } from '../../types/Character';\nimport { getSearchWith } from '../../utils/searchHelper';\nimport { Cards } from '../Cards/Cards';\nimport './CharactersPage.scss';\n\nexport const CharactersPage: React.FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const page = searchParams.get('page' || '');\n  const gender = searchParams.get('gender' || '');\n  const species = searchParams.get('species' || '');\n  const status = searchParams.get('status' || '');\n  const { search } = useLocation();\n  const [characters, setCharacters] = useState<Character[]>([]);\n  const [pagesNumber, setPagesNumber] = useState<number>(1);\n  const [actualPage, setActualPage] = useState<number | undefined>(1);\n  const [findError, setFindError] = useState<boolean>(false);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const loadedCharacters = await getCharacters('');\n\n        setCharacters(loadedCharacters.results);\n        setPagesNumber(loadedCharacters.info.pages);\n      } catch {\n        setFindError(true);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const loadedCharacters = await getCharacters(search);\n\n        setCharacters(loadedCharacters.results);\n        setPagesNumber(loadedCharacters.info.pages);\n      } catch {\n        setFindError(true);\n      }\n    };\n\n    if (page) {\n      setActualPage(+page);\n    }\n\n    if (!page) {\n      setActualPage(1);\n    }\n\n    loadData();\n  }, [page, gender, species, status]);\n\n  const onPageChange = (event: React.ChangeEvent<unknown>, value: number) => {\n    setActualPage(value);\n    setSearchParams(\n      getSearchWith(searchParams, { page: String(value) || null }),\n    );\n  };\n\n  const onGenderChange = (event: SelectChangeEvent) => {\n    setFindError(false);\n    setSearchParams(\n      getSearchWith(searchParams, {\n        gender: event.target.value || null,\n        page: null,\n      }),\n    );\n  };\n\n  const onSpeciesChange = (event: SelectChangeEvent) => {\n    setFindError(false);\n    setSearchParams(\n      getSearchWith(searchParams, {\n        species: event.target.value || null,\n        page: null,\n      }),\n    );\n  };\n\n  const onStatusChange = (event: SelectChangeEvent) => {\n    setFindError(false);\n    setSearchParams(\n      getSearchWith(searchParams, {\n        status: event.target.value || null,\n        page: null,\n      }),\n    );\n  };\n\n  return (\n    <div className=\"charactersPage\">\n      {characters.length === 0\n        ? (\n          <Box className=\"loader\">\n            <CircularProgress />\n          </Box>\n        )\n        : (\n          <>\n            <div className=\"charactersPage-filter\">\n              <Pagination\n                page={actualPage || 1}\n                count={pagesNumber}\n                color=\"secondary\"\n                onChange={onPageChange}\n                className=\"pagination\"\n              />\n\n              <Box>\n                <FormControl sx={{ width: 210, background: 'rgba(161,21,207, 0.5)' }} variant=\"filled\">\n                  <InputLabel\n                    id=\"genderSelect\"\n                    sx={{\n                      color: 'white',\n                      '&.Mui-focused': {\n                        color: 'white',\n                      },\n                    }}\n                  >\n                    Select gender\n                  </InputLabel>\n                  <Select\n                    value={gender || ''}\n                    onChange={onGenderChange}\n                    labelId=\"genderSelect\"\n                    label=\"Select gender\"\n                    color=\"secondary\"\n                    sx={{\n                      color: 'white',\n                    }}\n                  >\n                    <MenuItem value=\"\">Select gender</MenuItem>\n                    <MenuItem value=\"Female\">Female</MenuItem>\n                    <MenuItem value=\"Male\">Male</MenuItem>\n                    <MenuItem value=\"unknown\">Unknown</MenuItem>\n                  </Select>\n                </FormControl>\n              </Box>\n\n              <Box>\n                <FormControl sx={{ width: 210, background: 'rgba(161,21,207, 0.5)' }} variant=\"filled\">\n                  <InputLabel\n                    id=\"statusSpecies\"\n                    sx={{\n                      color: 'white',\n                      '&.Mui-focused': {\n                        color: 'white',\n                      },\n                    }}\n                  >\n                    Select species\n                  </InputLabel>\n                  <Select\n                    value={species || ''}\n                    onChange={onSpeciesChange}\n                    labelId=\"speciesSelect\"\n                    label=\"Select species\"\n                    color=\"secondary\"\n                    sx={{\n                      color: 'white',\n                    }}\n                  >\n                    <MenuItem value=\"\">Select species</MenuItem>\n                    <MenuItem value=\"Humanoid\">Humanoid</MenuItem>\n                    <MenuItem value=\"Human\">Human</MenuItem>\n                    <MenuItem value=\"Alien\">Alien</MenuItem>\n                    <MenuItem value=\"Poopybutthole\">Poopybutthole</MenuItem>\n                    <MenuItem value=\"Mythological Creature\">Mythological Creature</MenuItem>\n                    <MenuItem value=\"Robot\">Robot</MenuItem>\n                    <MenuItem value=\"Animal\">Animal</MenuItem>\n                    <MenuItem value=\"Cronenberg\">Cronenberg</MenuItem>\n                    <MenuItem value=\"Disease\">Disease</MenuItem>\n                    <MenuItem value=\"unknown\">unknown</MenuItem>\n                  </Select>\n                </FormControl>\n              </Box>\n\n              <Box>\n                <FormControl sx={{ width: 210, background: 'rgba(161,21,207, 0.5)' }} variant=\"filled\">\n                  <InputLabel\n                    id=\"statusSelect\"\n                    sx={{\n                      color: 'white',\n                      '&.Mui-focused': {\n                        color: 'white',\n                      },\n                    }}\n                  >\n                    Select status\n                  </InputLabel>\n                  <Select\n                    value={status || ''}\n                    onChange={onStatusChange}\n                    labelId=\"statusSelect\"\n                    label=\"Select status\"\n                    color=\"secondary\"\n                    sx={{\n                      color: 'white',\n                    }}\n                  >\n                    <MenuItem value=\"\">Select status</MenuItem>\n                    <MenuItem value=\"Alive\">Alive</MenuItem>\n                    <MenuItem value=\"Dead\">Dead</MenuItem>\n                    <MenuItem value=\"unknown\">Unknown</MenuItem>\n                  </Select>\n                </FormControl>\n              </Box>\n\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                onClick={() => {\n                  setFindError(false);\n                  setSearchParams(\n                    getSearchWith(searchParams, {\n                      page: null,\n                      gender: null,\n                      species: null,\n                      status: null,\n                    }),\n                  );\n                }}\n              >\n                Reset\n              </Button>\n            </div>\n            <ul className=\"charactersPage-list\">\n              {findError\n                ? (<li className=\"charactersPage-error\">There is no character with such query.</li>)\n                : (\n                  characters.map(card => (\n                    <li key={card.id}><Cards card={card} /></li>\n                  ))\n                )}\n            </ul>\n          </>\n        )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Typography } from '@mui/material';\nimport './HomePage.scss';\n\nexport const HomePage = () => {\n  return (\n    <Typography variant=\"h1\" component=\"h2\" className=\"homePage\" color=\"white\">\n      Rick and Morty\n    </Typography>\n  );\n};\n","import { InfoEpisodes } from '../types/InfoEpisodes';\nimport { client } from '../utils/fetchClient';\n\nexport const getEpisodes = (search: string) => {\n  if (!search) {\n    return client.get<InfoEpisodes>('/episode/');\n  }\n\n  return client.get<InfoEpisodes>(`/episode/${search}`);\n};\n","import {\n  Box,\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Pagination,\n  TextField,\n  Button,\n} from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { getEpisodes } from '../../api/episodes';\nimport { Episode } from '../../types/Episode';\nimport { getSearchWith } from '../../utils/searchHelper';\nimport './EpisodesPage.scss';\n\nexport const EpisodesPage: React.FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const page = searchParams.get('page' || '');\n  const name = searchParams.get('name') || '';\n  const { search } = useLocation();\n  const [episodes, setEpisodes] = useState<Episode[]>([]);\n  const [pagesNumber, setPagesNumber] = useState<number>(1);\n  const [findError, setFindError] = useState<boolean>(false);\n  const [actualPage, setActualPage] = useState<number | undefined>(1);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const loadedEpisodes = await getEpisodes('');\n\n        setEpisodes(loadedEpisodes.results);\n        setPagesNumber(loadedEpisodes.info.pages);\n      } catch {\n        setFindError(true);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const loadedEpisodes = await getEpisodes(search);\n\n        setEpisodes(loadedEpisodes.results);\n        setPagesNumber(loadedEpisodes.info.pages);\n      } catch {\n        setFindError(true);\n      }\n    };\n\n    if (page) {\n      setActualPage(+page);\n    }\n\n    if (!page) {\n      setActualPage(1);\n    }\n\n    loadData();\n  }, [page, name]);\n\n  const onPageChange = (event: React.ChangeEvent<unknown>, value: number) => {\n    setActualPage(value);\n    setSearchParams(\n      getSearchWith(searchParams, { page: String(value) || null }),\n    );\n  };\n\n  const onNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFindError(false);\n    setSearchParams(\n      getSearchWith(searchParams, {\n        name: event.target.value || null,\n        page: null,\n      }),\n    );\n  };\n\n  return (\n    <div className=\"episodesPage\">\n      {episodes.length === 0\n        ? (\n          <Box className=\"loader\">\n            <CircularProgress />\n          </Box>\n        )\n        : (\n          <>\n            <div className=\"episodesPage-filters\">\n              <Pagination\n                page={actualPage || 1}\n                count={pagesNumber}\n                color=\"secondary\"\n                className=\"pagination\"\n                onChange={onPageChange}\n              />\n\n              <TextField\n                sx={{ width: 210, background: 'rgba(161,21,207, 0.5)' }}\n                label=\"Search name\"\n                variant=\"filled\"\n                onChange={onNameChange}\n                value={name}\n                color=\"secondary\"\n                InputLabelProps={{\n                  style: {\n                    color: 'white',\n                  },\n                }}\n                inputProps={{ style: { color: 'white' } }}\n              />\n\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                onClick={() => {\n                  setFindError(false);\n                  setSearchParams(\n                    getSearchWith(searchParams, {\n                      page: null,\n                      name: null,\n                    }),\n                  );\n                }}\n              >\n                Reset\n              </Button>\n            </div>\n\n            {findError\n              ? (<div className=\"episodesPage-error\">There is no episode with such query.</div>)\n              : (\n                <TableContainer component={Paper}>\n                  <Table aria-label=\"simple table\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell align=\"right\">Episode</TableCell>\n                        <TableCell align=\"right\">Air date</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {episodes.map((episode) => (\n                        <TableRow\n                          key={episode.name}\n                          sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                        >\n                          <TableCell component=\"th\" scope=\"row\">\n                            {episode.name}\n                          </TableCell>\n                          <TableCell align=\"right\">{episode.episode}</TableCell>\n                          <TableCell align=\"right\">{episode.air_date}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              )}\n          </>\n        )}\n    </div>\n  );\n};\n","import { InfoLocations } from '../types/InfoLocations';\nimport { client } from '../utils/fetchClient';\n\nexport const getLocations = (search: string) => {\n  if (!search) {\n    return client.get<InfoLocations>('/location/');\n  }\n\n  return client.get<InfoLocations>(`/location/${search}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Box,\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Pagination,\n  TextField,\n  Button,\n} from '@mui/material';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { Location } from '../../types/Location';\nimport { getLocations } from '../../api/locations';\nimport { getSearchWith } from '../../utils/searchHelper';\nimport './LocationsPage.scss';\n\nexport const LocationsPage: React.FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const page = searchParams.get('page' || '');\n  const name = searchParams.get('name') || '';\n  const type = searchParams.get('type') || '';\n  const dimension = searchParams.get('dimension') || '';\n  const { search } = useLocation();\n  const [locations, setLocations] = useState<Location[]>([]);\n  const [pagesNumber, setPagesNumber] = useState<number>(1);\n  const [findError, setFindError] = useState<boolean>(false);\n  const [actualPage, setActualPage] = useState<number | undefined>(1);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const loadedLocations = await getLocations('');\n\n        setLocations(loadedLocations.results);\n        setPagesNumber(loadedLocations.info.pages);\n      } catch {\n        setFindError(true);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const loadedLocations = await getLocations(search);\n\n        setLocations(loadedLocations.results);\n        setPagesNumber(loadedLocations.info.pages);\n      } catch {\n        setFindError(true);\n      }\n    };\n\n    if (page) {\n      setActualPage(+page);\n    }\n\n    if (!page) {\n      setActualPage(1);\n    }\n\n    loadData();\n  }, [page, name, type, dimension]);\n\n  const onPageChange = (event: React.ChangeEvent<unknown>, value: number) => {\n    setActualPage(value);\n    setSearchParams(\n      getSearchWith(searchParams, { page: String(value) || null }),\n    );\n  };\n\n  const onNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFindError(false);\n    setSearchParams(\n      getSearchWith(searchParams, {\n        name: event.target.value || null,\n        page: null,\n      }),\n    );\n  };\n\n  const onTypeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFindError(false);\n    setSearchParams(\n      getSearchWith(searchParams, {\n        type: event.target.value || null,\n        page: null,\n      }),\n    );\n  };\n\n  const onDimensionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFindError(false);\n    setSearchParams(\n      getSearchWith(searchParams, {\n        dimension: event.target.value || null,\n        page: null,\n      }),\n    );\n  };\n\n  return (\n    <div className=\"locationsPage\">\n      {locations.length === 0\n        ? (\n          <Box className=\"loader\">\n            <CircularProgress />\n          </Box>\n        )\n        : (\n          <>\n            <div className=\"locationsPage-filters\">\n              <Pagination\n                page={actualPage || 1}\n                count={pagesNumber}\n                color=\"secondary\"\n                className=\"pagination\"\n                onChange={onPageChange}\n              />\n\n              <TextField\n                sx={{ width: 210, background: 'rgba(161,21,207, 0.5)' }}\n                label=\"Search name\"\n                variant=\"filled\"\n                onChange={onNameChange}\n                value={name}\n                color=\"secondary\"\n                InputLabelProps={{\n                  style: {\n                    color: 'white',\n                  },\n                }}\n                inputProps={{ style: { color: 'white' } }}\n              />\n\n              <TextField\n                sx={{ width: 210, background: 'rgba(161,21,207, 0.5)' }}\n                label=\"Search type\"\n                variant=\"filled\"\n                onChange={onTypeChange}\n                value={type}\n                color=\"secondary\"\n                InputLabelProps={{\n                  style: {\n                    color: 'white',\n                  },\n                }}\n                inputProps={{ style: { color: 'white' } }}\n              />\n\n              <TextField\n                sx={{ width: 210, background: 'rgba(161,21,207, 0.5)' }}\n                label=\"Search dimension\"\n                variant=\"filled\"\n                onChange={onDimensionChange}\n                value={dimension}\n                color=\"secondary\"\n                InputLabelProps={{\n                  style: {\n                    color: 'white',\n                  },\n                }}\n                inputProps={{ style: { color: 'white' } }}\n              />\n\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                onClick={() => {\n                  setFindError(false);\n                  setSearchParams(\n                    getSearchWith(searchParams, {\n                      page: null,\n                      name: null,\n                      type: null,\n                      dimension: null,\n                    }),\n                  );\n                }}\n              >\n                Reset\n              </Button>\n            </div>\n\n            {findError\n              ? (<div className=\"locationsPage-error\">There is no locaton with such query.</div>)\n              : (\n                <TableContainer component={Paper}>\n                  <Table aria-label=\"simple table\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell align=\"right\">Type</TableCell>\n                        <TableCell align=\"right\">Dimension</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {locations.map((location) => (\n                        <TableRow\n                          key={location.name}\n                          sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                        >\n                          <TableCell component=\"th\" scope=\"row\">\n                            {location.name}\n                          </TableCell>\n                          <TableCell align=\"right\">{location.type}</TableCell>\n                          <TableCell align=\"right\">{location.dimension}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              )}\n          </>\n        )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport {\n  Checkbox,\n  Pagination,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  IconButton,\n  Typography,\n} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { Episode } from '../../types/Episode';\nimport { getSearchWith } from '../../utils/searchHelper';\nimport { getEpisodes } from '../../api/episodes';\nimport './MyWatchList.scss';\n\nconst useLocalStorage = (key: string, initialValue: []) => {\n  const getDataFromStorage = localStorage.getItem('watchList');\n\n  const storage = getDataFromStorage !== null ? JSON.parse(getDataFromStorage) : initialValue;\n\n  const [value, setValue] = useState(\n    storage || initialValue,\n  );\n\n  const save = (episode: Episode) => {\n    setValue(episode);\n    localStorage.setItem(key, JSON.stringify(episode));\n  };\n\n  return [value, save];\n};\n\nexport const MyWatchList: React.FC = () => {\n  const [watchList, setWatchList] = useLocalStorage('watchList', []);\n  const [episodes, setEpisodes] = useState<Episode[]>([]);\n  const [pagesNumber, setPagesNumber] = useState<number>(1);\n  const [actualPage, setActualPage] = useState<number | undefined>(1);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [findError, setFindError] = useState<boolean>(false);\n  const page = searchParams.get('page' || '');\n  const name = searchParams.get('name') || '';\n  const { search } = useLocation();\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const loadedEpisodes = await getEpisodes(search);\n\n        setEpisodes(loadedEpisodes.results);\n        setPagesNumber(loadedEpisodes.info.pages);\n      } catch {\n        setFindError(true);\n      }\n    };\n\n    if (page) {\n      setActualPage(+page);\n    }\n\n    if (!page) {\n      setActualPage(1);\n    }\n\n    loadData();\n  }, [page, name, watchList]);\n\n  const onNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFindError(false);\n    setSearchParams(\n      getSearchWith(searchParams, {\n        name: event.target.value || null,\n        page: null,\n      }),\n    );\n  };\n\n  const onPageChange = (event: React.ChangeEvent<unknown>, value: number) => {\n    setActualPage(value);\n    setSearchParams(\n      getSearchWith(searchParams, { page: String(value) || null }),\n    );\n  };\n\n  const addEpisode = (episode: Episode) => {\n    if (watchList.some((item: { name: string; }) => item.name === episode.name)) {\n      return null;\n    }\n\n    return setWatchList([\n      ...watchList,\n      {\n        ...episode,\n        watched: false,\n      },\n    ]);\n  };\n\n  const deleteEpisode = (episode: Episode) => {\n    const updatedList = watchList.filter((item: { name: string; }) => item.name !== episode.name);\n\n    return setWatchList(updatedList);\n  };\n\n  const handleChange = (episode: Episode) => {\n    const changeStatus = watchList.find((item: { name: string; }) => item.name === episode.name);\n    const updatedList = watchList.map((item: { name: string; }) => {\n      if (item.name !== episode.name) {\n        return item;\n      }\n\n      return {\n        ...item,\n        watched: !changeStatus.watched,\n      };\n    });\n\n    setWatchList(updatedList);\n  };\n\n  return (\n    <div className=\"myWatchPage\">\n      <div className=\"myWatchPage-search\">\n        <TextField\n          sx={{ width: 210, background: 'rgba(161,21,207, 0.5)' }}\n          label=\"Write an episode name.\"\n          variant=\"filled\"\n          onChange={onNameChange}\n          value={name}\n          color=\"secondary\"\n          InputLabelProps={{\n            style: {\n              color: 'white',\n            },\n          }}\n          inputProps={{ style: { color: 'white' } }}\n        />\n\n        {name !== '' && (\n          <>\n            <Pagination\n              page={actualPage || 1}\n              count={pagesNumber}\n              color=\"secondary\"\n              className=\"pagination\"\n              onChange={onPageChange}\n            />\n\n            {findError\n              ? (<div className=\"myWatchPage-error\">There is no episode with such query.</div>)\n              : (\n                <TableContainer component={Paper}>\n                  <Table aria-label=\"simple table\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell align=\"right\">Episode</TableCell>\n                        <TableCell align=\"right\">Air date</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {episodes.map((episode) => (\n                        <TableRow\n                          key={episode.name}\n                          sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                        >\n                          <TableCell onClick={() => addEpisode(episode)} component=\"th\" scope=\"row\">\n                            {episode.name}\n                          </TableCell>\n                          <TableCell onClick={() => addEpisode(episode)} align=\"right\">{episode.episode}</TableCell>\n                          <TableCell onClick={() => addEpisode(episode)} align=\"right\">{episode.air_date}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              )}\n          </>\n        )}\n      </div>\n\n      <div className=\"myWatchPage-list\">\n        <Typography variant=\"h3\" gutterBottom color=\"white\">\n          My watchList\n        </Typography>\n        {watchList.length !== 0\n          ? (\n            <TableContainer component={Paper}>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell />\n                    <TableCell />\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {watchList.map((item: Episode) => (\n                    <TableRow\n                      key={item.name}\n                      sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          color=\"primary\"\n                          checked={item.watched}\n                          onChange={() => handleChange(item)}\n                        />\n                      </TableCell>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {item.name}\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => deleteEpisode(item)}>\n                          <DeleteIcon />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          )\n          : (\n            <div className=\"myWatchPage-error\">No episode to watch.</div>\n          )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport { Header } from './components/Header/Header';\nimport { CharactersPage } from './components/CharactersPage/CharactersPage';\nimport { HomePage } from './components/HomePage/HomePage';\nimport { EpisodesPage } from './components/EpisodesPage/EpisodesPage';\nimport { LocationsPage } from './components/LocationsPage/LocationsPage';\nimport { MyWatchList } from './components/MyWatchList/MyWatchList';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <Header />\n\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        <Route path=\"/character\" element={<CharactersPage />} />\n        <Route path=\"/episode\" element={<EpisodesPage />} />\n        <Route path=\"/location\" element={<LocationsPage />} />\n        <Route path=\"/my-watch-list\" element={<MyWatchList />} />\n      </Routes>\n    </div>\n  );\n};\n","import React from 'react';\nimport './index.scss';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}